% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/POST_FATE.graphic_validationStatistics.R
\name{POST_FATE.graphic_validationStatistics}
\alias{POST_FATE.graphic_validationStatistics}
\title{Create a graphical representation of several statistics for each PFG 
to asses the quality of the model \cr for one (or several) specific year of 
a \code{FATE-HD} simulation}
\usage{
POST_FATE.graphic_validationStatistics(name.simulation,
  file.simulParam = NULL, year, mat.PFG.obs, opt.ras_habitat = NULL,
  opt.no_CPU = 1, opt.doPlot = TRUE)
}
\arguments{
\item{name.simulation}{a \code{string} that corresponds to the main 
directory or simulation name of the \code{FATE-HD} simulation}

\item{file.simulParam}{a \code{string} that corresponds to the name of a 
parameter file that will be contained into the \code{PARAM_SIMUL} folder 
of the \code{FATE-HD} simulation}

\item{year}{an \code{integer} corresponding to the simulation year(s) that 
will be used to extract PFG binary maps}

\item{mat.PFG.obs}{a \code{data.frame} with 4 columns : \code{PFG}, 
\code{X}, \code{Y}, \code{obs}}

\item{opt.ras_habitat}{default \code{NULL} (\emph{optional}). A 
\code{string} that corresponds to the file name of a raster mask, with an 
\code{integer} value within each pixel, corresponding to a specific habitat}

\item{opt.no_CPU}{default \code{1} (\emph{optional}). The number of 
resources that can be used to parallelize the \code{unzip/zip} of raster 
files}

\item{opt.doPlot}{default \code{TRUE} (\emph{optional}). If \code{TRUE}, 
plot(s) will be processed, otherwise only the calculation and 
reorganization of outputs will occur, be saved and returned.}
}
\value{
A \code{list} containing one \code{data.frame} object with the 
following columns, and one \code{ggplot2} object :

\describe{
  \item{tab}{ 
    \describe{
      \item{\code{PFG}}{the concerned Plant Functional Group}
      \item{\code{AUC.sd}}{standard deviation of the AUC values}
      \item{\code{sensitivity.sd}}{standard deviation of the sensitivity 
      values}
      \item{\code{specificity.sd}}{standard deviation of the specificity 
      values}
      \item{\code{variable}}{name of the calculated statistic among 
      '\code{sensitivity}', '\code{specificity}', '\code{TSS}' and 
      '\code{AUC}'}
      \item{\code{value}}{value of the corresponding statistic}
    }
  }
  \item{plot}{\code{ggplot2} object, representing the values for each PFG 
  of these four validation statistics (sensitivity, specificity, TSS, AUC) 
  \cr \cr}
}

One \code{POST_FATE_TABLE_YEAR_[...].csv} file is created : 
\describe{
  \item{\file{validationStatistics}}{containing the \code{data.frame} detailed above}
}

Two folders are created :
\describe{
  \item{\file{BIN_perPFG \cr_allStrata}}{containing presence / absence 
  raster maps for each PFG across all strata}
  \item{\file{BIN_perPFG \cr_perStrata}}{containing presence / absence 
  raster maps for each PFG for each stratum}
}

One \code{POST_FATE_[...].pdf} file is created : 
\describe{
  \item{\file{GRAPHIC_B \cr validationStatistics}}{to assess the modeling 
  quality of each PFG based on given observations within the studied area}
}
}
\description{
This script is designed to produce a graphical representation 
of several statistics (sensitivity, specificity, TSS, AUC) for quality 
assessment for one (or several) specific \code{FATE-HD} simulation year.
}
\details{
This function allows one to obtain, for a specific \code{FATE-HD} 
simulation and a specific parameter file within this simulation, raster 
maps of PFG presence / absence and one preanalytical graphic. \cr \cr


Observation records (presences and absences) are required for each PFG 
within the \code{mat.PFG.obs} object :

\describe{
  \item{\code{PFG}}{the concerned Plant Functional Group}
  \item{\code{X} and \code{Y}}{the coordinates of each observations,
  matching with the projection of the mask of \code{name.simulation}}
  \item{\code{obs}}{either 0 or 1 to indicate presences or absences}
}


For each PFG and each selected simulation year, raster maps are retrieved 
from the results folder \code{ABUND_REL_perPFG_allStrata} and unzipped. 
Informations extracted lead to the production of presence/absence maps and 
one graphic before the maps are compressed again :

\itemize{
  \item{for each selected simulation year(s), the value of \strong{several 
  statistics to evaluate the predictive quality of the model for each Plant 
  Functional Group} (sensitivity, specificity, TSS, AUC)
  }
  \item{for each selected simulation year(s), \strong{presence / absence} 
  maps of each Plant Functional Group within each stratum are obtained by 
  finding the best cutoff to transform abundanceq in 0/1 while optimizing 
  the values of sensitivity and specificity (see \code{\link{.getCutoff}}) 
  \cr \cr
  }
}

If a raster mask for habitat has been provided, the graphics will be also 
done per habitat. \cr \cr

It requires that the \code{\link{POST_FATE.relativeAbund}} function has 
been run and that the folder \code{ABUND_REL_perPFG_allStrata} exists. \cr

\strong{These binary \code{raster} files can then be used by other 
functions} :

\itemize{
  \item to produce graphics of PFG abundances vs PFG Habitat Suitability 
  maps (see \code{\link{POST_FATE.graphic_mapPFGvsHS}})
}
}
\examples{

\dontrun{                      
POST_FATE.graphic_validationStatistics(name.simulation = "FATE_simulation"
                                       , file.simulParam = "Simul_parameters_V1.txt"
                                       , year = 850
                                       , mat.PFG.obs = 
                                       , opt.no_CPU = 1)
                                    
POST_FATE.graphic_validationStatistics(name.simulation = "FATE_simulation"
                                       , file.simulParam = "Simul_parameters_V1.txt"
                                       , year = c(850, 950)
                                       , mat.PFG.obs = 
                                       , opt.no_CPU = 1)
}
                                                        
                                                        
                                                        
## ----------------------------------------------------------------------------------------- ##
## Load example data
PNE_PFG = .loadData("PNE_PFG")
PNE_PARAM = .loadData("PNE_PARAM")
PNE_RESULTS = .loadData("PNE_RESULTS")

## PNE_PFG$PFG.observations : data.frame
## PNE_PARAM$succ_light : data.frame
## PNE_PARAM$strata_limits : vector
## PNE_PARAM$disp : data.frame
## PNE_PARAM$dist : data.frame
## PNE_PARAM$global : vector
## PNE_PARAM$masks : rasterStack
## PNE_RESULTS$abund_str.equilibrium : rasterStack

## Create a skeleton folder
PRE_FATE.skeletonDirectory(name.simulation = "FATE_PNE")

## Create PFG succession parameter files : predefined of strata limits
tab = PNE_PARAM$succ_light[, c("PFG", "type", "height", "maturity", "longevity")]
PRE_FATE.params_PFGsuccession(name.simulation = "FATE_PNE"
                              , mat.PFG.succ = tab
                              , strata.limits = PNE_PARAM$strata_limits
                              , strata.limits_reduce = FALSE)

## Create PFG light parameter files : predefined of strata limits
tab = PNE_PARAM$succ_light[, c("PFG", "type", "height", "maturity", "longevity", "light")]
PRE_FATE.params_PFGlight(name.simulation = "FATE_PNE"
                         , mat.PFG.succ = tab
                         , strata.limits = PNE_PARAM$strata_limits
                         , strata.limits_reduce = FALSE)

## Create PFG dispersal parameter files
PRE_FATE.params_PFGdispersal(name.simulation = "FATE_PNE"
                             , mat.PFG.disp = PNE_PARAM$disp)

## Create PFG disturbance parameter files
PRE_FATE.params_PFGdisturbance(name.simulation = "FATE_PNE"
                               , mat.PFG.dist = PNE_PARAM$dist)

## Create a Global_parameters file
PRE_FATE.params_globalParameters(name.simulation = "FATE_PNE"
                                 , required.no_PFG = PNE_PARAM$global["NB_FG"]
                                 , required.no_STRATA = PNE_PARAM$global["NB_STRATUM"]
                                 , required.simul_duration = PNE_PARAM$global["SIMULATION_DURATION"]
                                 , required.seeding_duration = PNE_PARAM$global["SEEDING_DURATION"]
                                 , required.seeding_timestep = PNE_PARAM$global["SEEDING_TIMESTEP"]
                                 , required.seeding_input = PNE_PARAM$global["SEEDING_INPUT"]
                                 , required.max_abund_low = PNE_PARAM$global["MAX_ABUND_LOW"]
                                 , required.max_abund_medium = PNE_PARAM$global["MAX_ABUND_MEDIUM"]
                                 , required.max_abund_high = PNE_PARAM$global["MAX_ABUND_HIGH"]
                                 , doLight = TRUE
                                 , LIGHT.thresh_medium = PNE_PARAM$global["LIGHT.thresh_medium"]
                                 , LIGHT.thresh_low = PNE_PARAM$global["LIGHT.thresh_low"]
                                 , doDispersal = TRUE
                                 , DISPERSAL.mode = PNE_PARAM$global["DISPERSAL.mode"]
                                 , doHabSuitability = TRUE
                                 , HABSUIT.ref_option = PNE_PARAM$global["HABSUIT.ref_option"]
                                 , doDisturbances = TRUE
                                 , DIST.no = PNE_PARAM$global["DIST.no"]
                                 , DIST.no_sub = PNE_PARAM$global["DIST.no_sub"]
                                 , DIST.freq = rep(PNE_PARAM$global["DIST.freq"]
                                                   , PNE_PARAM$global["DIST.no"])
)

## Create simulation masks
library(raster)
writeRaster(PNE_PARAM$masks$maskEcrins
            , file = "FATE_PNE/DATA/MASK/mask.tif"
            , overwrite = TRUE)
writeRaster(PNE_PARAM$masks$noDisturb
            , file = "FATE_PNE/DATA/MASK/noDisturb.tif"
            , overwrite = TRUE)

## Create simulation parameters file
PRE_FATE.params_simulParameters(name.simulation = "FATE_PNE"
                                , name.mask = "mask.tif"
                                , name.dist = "noDisturb.tif")

## Create results folders
name.folder = "FATE_PNE"
name.simul = "SIMUL_V1"
dir1 = paste0(name.folder, "/RESULTS/", name.simul, "/ABUND_perPFG_allStrata")
dir2 = paste0(name.folder, "/RESULTS/", name.simul, "/ABUND_perPFG_perStrata")
dir3 = paste0(name.folder, "/RESULTS/", name.simul, "/LIGHT")
dir4 = paste0(name.folder, "/RESULTS/", name.simul, "/SOIL")

dir.create(dir1, recursive = TRUE)
dir.create(dir2, recursive = TRUE)
dir.create(dir3, recursive = TRUE)
dir.create(dir4, recursive = TRUE)

## Create results files
PFG.names = PNE_PARAM$succ_light$PFG
PFG.short = sapply(PFG.names, function(x) strsplit(x, "_")[[1]][1])
for (pfg in PFG.names)
{
  ind = grep(pfg, names(PNE_RESULTS$abund_str.equilibrium))
  stk = PNE_RESULTS$abund_str.equilibrium[[ind]]
  writeRaster(stk
              , filename = paste0(dir2, "/Abund_YEAR_800_", pfg, "_STRATA_"
                                  , sub(".*str", "", names(stk)), ".tif")
              , overwrite = TRUE
              , bylayer = TRUE)
  ras = sum(stk)
  writeRaster(ras
              , filename = paste0(dir1, "/Abund_YEAR_800_", pfg, "_STRATA_all.tif")
              , overwrite = TRUE)
}

## Create relative abundance maps
POST_FATE.relativeAbund(name.simulation = "FATE_PNE"
                        , file.simulParam = "Simul_parameters_V1.txt"
                        , year = 800
                        , opt.no_CPU = 1)

## Create binary maps
library(reshape2)
tab = PNE_PFG$PFG.observations
tab = melt(tab, id.vars = c("sites", "X", "Y"))
colnames(tab) = c("sites", "X", "Y", "PFG", "obs")
tab = tab[, c("PFG", "X", "Y", "obs")]
tab = tab[which(tab$PFG != "Others"), ]
tab$PFG = sapply(tab$PFG, function(x) names(PFG.short)[which(PFG.short == x)])
tab$obs = ifelse(tab$obs > 0, 1, 0)
str(tab)

validStats = POST_FATE.graphic_validationStatistics(name.simulation = "FATE_PNE"
                                                    , file.simulParam = "Simul_parameters_V1.txt"
                                                    , year = 800
                                                    , mat.PFG.obs = tab
                                                    , opt.no_CPU = 1)

str(validStats$`FATE_PNE/PARAM_SIMUL/Simul_parameters_V1.txt`$tab$`800`)
plot(validStats$`FATE_PNE/PARAM_SIMUL/Simul_parameters_V1.txt`$plot$`800`$ALL)
                                                                         

}
\seealso{
\code{\link{POST_FATE.relativeAbund}}, \code{\link{.getCutoff}},
\code{\link{POST_FATE.graphic_mapPFGvsHS}}
}
\author{
Maya Guéguen
}
\keyword{FATE,}
\keyword{area}
\keyword{binary,}
\keyword{curve,}
\keyword{outputs,}
\keyword{sensitivity,}
\keyword{skill}
\keyword{specificity,}
\keyword{statistic}
\keyword{true}
\keyword{under}
