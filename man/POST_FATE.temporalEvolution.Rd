% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/POST_FATE.temporalEvolution.R
\name{POST_FATE.temporalEvolution}
\alias{POST_FATE.temporalEvolution}
\title{Create tables of pixel temporal evolution of PFG abundances (and 
light and soil resources if activated) for a \code{FATE-HD} simulation}
\usage{
POST_FATE.temporalEvolution(name.simulation, file.simulParam = NULL,
  no.years = 10, opt.ras_habitat = NULL, opt.no_CPU = 1)
}
\arguments{
\item{name.simulation}{a \code{string} that corresponds to the main 
directory or simulation name of the \code{FATE-HD} simulation}

\item{file.simulParam}{a \code{string} that corresponds to the name of a 
parameter file that will be contained into the \code{PARAM_SIMUL} folder 
of the \code{FATE-HD} simulation}

\item{no.years}{an \code{integer} corresponding to the number of simulation 
years that will be used to extract PFG abundance / light / soil maps}

\item{opt.ras_habitat}{default \code{NULL} (\emph{optional}). A \code{string} that 
corresponds to the file name of a raster mask, with an \code{integer} value 
within each pixel, corresponding to a specific habitat}

\item{opt.no_CPU}{default \code{1} (\emph{optional}). The number of 
resources that can be used to parallelize the \code{unzip/zip} of raster 
files}
}
\value{
A \code{list} containing three \code{data.frame} objects with the 
following columns :
\describe{
  \item{\code{PFG}}{the concerned Plant Functional Group (for abundance)}
  \item{\code{STRATUM}}{the concerned height stratum (for LIGHT)}
  \item{\code{ID}}{the concerned pixel}
  \item{\code{X, Y}}{the coordinates of the concerned pixel}
  \item{\code{HAB}}{the habitat of the concerned pixel}
  \item{\emph{years}}{values of the corresponding object for each 
  selected simulation year(s)}
}

One to three \code{POST_FATE_evolution_[...].csv} files are created : 
\describe{
  \item{\file{abundance_PIXEL}}{always}
  \item{\file{light_PIXEL}}{\emph{if LIGHT module was activated}}
  \item{\file{soil_PIXEL}}{\emph{if SOIL module was activated}}
}
}
\description{
This script is designed to produce from 1 to 3 tables 
containing pixel temporal evolution of PFG abundances as well as light and 
soil resources if those modules were activated in a \code{FATE-HD} 
simulation.
}
\details{
This function allows one to obtain, for a specific \code{FATE-HD} 
simulation and a specific parameter file within this simulation, one to 
three preanalytical tables that can then be used to create graphics.
\cr \cr

For each PFG and each selected simulation year, raster maps are retrieved 
from the results folder \code{ABUND_perPFG_allStrata} and unzipped.
Informations extracted lead to the production of one table before the maps 
are compressed again :

\itemize{
  \item{the value of \strong{abundance for each Plant Functional Group} 
  for each selected simulation year(s) in every pixel in which the PFG is 
  present for at least one of the selected simulation year(s) \cr \cr
  }
}

IF the \code{LIGHT} module was activated (see 
\code{\link{PRE_FATE.params_globalParameters}}), for each height stratum 
and each selected simulation year, raster maps are retrieved from the 
results folder \code{LIGHT} and unzipped.
Informations extracted lead to the production of one table before the maps 
are compressed again :

\itemize{
  \item{the value of \strong{light resources for each height stratum} for 
  each selected simulation year(s) in every pixel \cr \cr
  }
}

IF the \code{SOIL} module was activated (see 
\code{\link{PRE_FATE.params_globalParameters}}), for each selected 
simulation year, raster maps are retrieved from the results folder 
\code{SOIL} and unzipped.
Informations extracted lead to the production of one table before the maps 
are compressed again :

\itemize{
  \item{the value of \strong{soil resources} for each selected simulation 
  year(s) in every pixel \cr \cr
  }
}

If a raster mask for habitat has been provided, the tables will also 
contain information about the pixel habitat. \cr \cr


\strong{These \code{.csv} files can then be used by other functions} :

\itemize{
  \item to produce graphics of temporal evolution of modelled abundances 
  and space occupancy at the whole area level \cr (see 
  \code{\link{POST_FATE.graphic_evolutionCoverage}})
  \item to produce graphics of temporal evolution of modelled abundances 
  and / or resources at the pixel level \cr (see 
  \code{\link{POST_FATE.graphic_evolutionPixels}})
}
}
\examples{

\dontrun{                      
POST_FATE.temporalEvolution(name.simulation = "FATE_simulation"
                                       , file.simulParam = "Simul_parameters_V1.txt"
                                       , opt.no_CPU = 1)
                                    
POST_FATE.temporalEvolution(name.simulation = "FATE_simulation"
                                       , file.simulParam = "Simul_parameters_V1.txt"
                                       , no.years = 50
                                       , opt.no_CPU = 1)
}
                                                        
                                                        
                                                        
## ----------------------------------------------------------------------------------------- ##
## Load example data
PNE_PFG = .loadData("PNE_PFG")
PNE_PARAM = .loadData("PNE_PARAM")
PNE_RESULTS = .loadData("PNE_RESULTS")

## PNE_PFG$PFG.observations : data.frame
## PNE_PARAM$succ_light : data.frame
## PNE_PARAM$strata_limits : vector
## PNE_PARAM$disp : data.frame
## PNE_PARAM$dist : data.frame
## PNE_PARAM$global : vector
## PNE_PARAM$masks : rasterStack
## PNE_RESULTS$abund_str.equilibrium : rasterStack

## Create a skeleton folder
PRE_FATE.skeletonDirectory(name.simulation = "FATE_PNE")

## Create PFG succession parameter files : predefined of strata limits
tab = PNE_PARAM$succ_light[, c("PFG", "type", "height", "maturity", "longevity")]
PRE_FATE.params_PFGsuccession(name.simulation = "FATE_PNE"
                              , mat.PFG.succ = tab
                              , strata.limits = PNE_PARAM$strata_limits
                              , strata.limits_reduce = FALSE)

## Create PFG light parameter files : predefined of strata limits
tab = PNE_PARAM$succ_light[, c("PFG", "type", "height", "maturity", "longevity", "light")]
PRE_FATE.params_PFGlight(name.simulation = "FATE_PNE"
                         , mat.PFG.succ = tab
                         , strata.limits = PNE_PARAM$strata_limits
                         , strata.limits_reduce = FALSE)

## Create PFG dispersal parameter files
PRE_FATE.params_PFGdispersal(name.simulation = "FATE_PNE"
                             , mat.PFG.disp = PNE_PARAM$disp)

## Create PFG disturbance parameter files
PRE_FATE.params_PFGdisturbance(name.simulation = "FATE_PNE"
                               , mat.PFG.dist = PNE_PARAM$dist)

## Create a Global_parameters file
PRE_FATE.params_globalParameters(name.simulation = "FATE_PNE"
                                 , required.no_PFG = PNE_PARAM$global["NB_FG"]
                                 , required.no_STRATA = PNE_PARAM$global["NB_STRATUM"]
                                 , required.simul_duration = PNE_PARAM$global["SIMULATION_DURATION"]
                                 , required.seeding_duration = PNE_PARAM$global["SEEDING_DURATION"]
                                 , required.seeding_timestep = PNE_PARAM$global["SEEDING_TIMESTEP"]
                                 , required.seeding_input = PNE_PARAM$global["SEEDING_INPUT"]
                                 , required.max_by_cohort = PNE_PARAM$global["MAX_BY_COHORT"]
                                 , required.max_abund_low = PNE_PARAM$global["MAX_ABUND_LOW"]
                                 , required.max_abund_medium = PNE_PARAM$global["MAX_ABUND_MEDIUM"]
                                 , required.max_abund_high = PNE_PARAM$global["MAX_ABUND_HIGH"]
                                 , doLight = TRUE
                                 , LIGHT.thresh_medium = PNE_PARAM$global["LIGHT.thresh_medium"]
                                 , LIGHT.thresh_low = PNE_PARAM$global["LIGHT.thresh_low"]
                                 , doDispersal = TRUE
                                 , DISPERSAL.mode = PNE_PARAM$global["DISPERSAL.mode"]
                                 , doHabSuitability = TRUE
                                 , HABSUIT.ref_option = PNE_PARAM$global["HABSUIT.ref_option"]
                                 , doDisturbances = TRUE
                                 , DIST.no = PNE_PARAM$global["DIST.no"]
                                 , DIST.no_sub = PNE_PARAM$global["DIST.no_sub"]
                                 , DIST.freq = rep(PNE_PARAM$global["DIST.freq"]
                                                   , PNE_PARAM$global["DIST.no"])
)

## Create simulation masks
library(raster)
writeRaster(PNE_PARAM$masks$maskEcrins
            , file = "FATE_PNE/DATA/MASK/mask.tif"
            , overwrite = TRUE)
writeRaster(PNE_PARAM$masks$noDisturb
            , file = "FATE_PNE/DATA/MASK/noDisturb.tif"
            , overwrite = TRUE)

## Create simulation parameters file
PRE_FATE.params_simulParameters(name.simulation = "FATE_PNE"
                                , name.mask = "mask.tif"
                                , name.dist = "noDisturb.tif")

## Create results folders
name.folder = "FATE_PNE"
name.simul = "SIMUL_V1"
dir1 = paste0(name.folder, "/RESULTS/", name.simul, "/ABUND_perPFG_allStrata")
dir2 = paste0(name.folder, "/RESULTS/", name.simul, "/ABUND_perPFG_perStrata")

dir.create(dir1, recursive = TRUE)
dir.create(dir2, recursive = TRUE)

## Create results files
PFG.names = PNE_PARAM$succ_light$PFG
PFG.short = sapply(PFG.names, function(x) strsplit(x, "_")[[1]][1])
for (pfg in PFG.names)
{
  ind = grep(pfg, names(PNE_RESULTS$abund_str.equilibrium))
  stk = PNE_RESULTS$abund_str.equilibrium[[ind]]
  ras = sum(stk)
  writeRaster(ras
              , filename = paste0(dir1, "/Abund_YEAR_800_", pfg, "_STRATA_all.tif")
              , overwrite = TRUE)
}


## Create temporal table

tempEvol = POST_FATE.temporalEvolution(name.simulation = "FATE_PNE"
                                                    , file.simulParam = "Simul_parameters_V1.txt"
                                                    , opt.no_CPU = 1)

str(tempEvol$`FATE_PNE/PARAM_SIMUL/Simul_parameters_V1.txt`)
                                                                         

}
\seealso{
\code{\link{PRE_FATE.params_globalParameters}},
\code{\link{POST_FATE.graphic_evolutionCoverage}},
\code{\link{POST_FATE.graphic_evolutionPixels}}
}
\author{
Maya Guéguen
}
\keyword{FATE,}
\keyword{evolution}
\keyword{outputs,}
\keyword{temporal}
